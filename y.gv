// Gerado por GNU Bison 3.8.2.
// Relate erros para <bug-bison@gnu.org>.
// Site: <https://www.gnu.org/software/bison/>.

digraph "parser.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="Estado 0\n\l  0 $accept: • programa $end\l"]
  0 -> 1 [style=solid label="FUNC"]
  0 -> 2 [style=dashed label="programa"]
  0 -> 3 [style=dashed label="subps"]
  0 -> 4 [style=dashed label="subp"]
  0 -> 5 [style=dashed label="funcao"]
  0 -> 6 [style=dashed label="procedimento"]
  0 -> "0R2" [style=solid]
 "0R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  1 [label="Estado 1\n\l  6 funcao: FUNC • TYPE ID '(' args ')' corpo ENDFUNC\l  7 procedimento: FUNC • ID '(' args ')' corpo\l"]
  1 -> 7 [style=solid label="ID"]
  1 -> 8 [style=solid label="TYPE"]
  2 [label="Estado 2\n\l  0 $accept: programa • $end\l"]
  2 -> 9 [style=solid label="$end"]
  3 [label="Estado 3\n\l  1 programa: subps • corpo\l"]
  3 -> 10 [style=solid label="ID"]
  3 -> 11 [style=solid label="TYPE"]
  3 -> 12 [style=solid label="WHILE"]
  3 -> 13 [style=solid label="IF"]
  3 -> 14 [style=solid label="FOR"]
  3 -> 15 [style=dashed label="corpo"]
  3 -> 16 [style=dashed label="blocks"]
  3 -> 17 [style=dashed label="block"]
  3 -> 18 [style=dashed label="var_declarations"]
  3 -> 19 [style=dashed label="method_declaration"]
  3 -> 20 [style=dashed label="while_loop"]
  3 -> 21 [style=dashed label="instructions"]
  3 -> 22 [style=dashed label="if_statement"]
  3 -> 23 [style=dashed label="for_loop"]
  3 -> 24 [style=dashed label="direct_assignment"]
  3 -> 25 [style=dashed label="aritimetic_operations"]
  3 -> 26 [style=dashed label="sum"]
  3 -> "3R17" [style=solid]
 "3R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  4 [label="Estado 4\n\l  3 subps: subp • subps\l"]
  4 -> 1 [style=solid label="FUNC"]
  4 -> 27 [style=dashed label="subps"]
  4 -> 4 [style=dashed label="subp"]
  4 -> 5 [style=dashed label="funcao"]
  4 -> 6 [style=dashed label="procedimento"]
  4 -> "4R2" [style=solid]
 "4R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  5 [label="Estado 5\n\l  4 subp: funcao •\l"]
  5 -> "5R4" [style=solid]
 "5R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  6 [label="Estado 6\n\l  5 subp: procedimento •\l"]
  6 -> "6R5" [style=solid]
 "6R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  7 [label="Estado 7\n\l  7 procedimento: FUNC ID • '(' args ')' corpo\l"]
  7 -> 28 [style=solid label="'('"]
  8 [label="Estado 8\n\l  6 funcao: FUNC TYPE • ID '(' args ')' corpo ENDFUNC\l"]
  8 -> 29 [style=solid label="ID"]
  9 [label="Estado 9\n\l  0 $accept: programa $end •\l"]
  9 -> "9R0" [style=solid]
 "9R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  10 [label="Estado 10\n\l 40 direct_assignment: ID • ASSIGNMENT NUMBER\l 42 aritimetic_operations: ID • ASSIGNMENT sum\l 43 sum: ID • OP_PLUS NUMBER\l 44    | ID • OP_PLUS ID\l 45    | ID • ADITION_ASSIGNMENT NUMBER\l"]
  10 -> 30 [style=solid label="ASSIGNMENT"]
  10 -> 31 [style=solid label="ADITION_ASSIGNMENT"]
  10 -> 32 [style=solid label="OP_PLUS"]
  11 [label="Estado 11\n\l 25 var_declarations: TYPE • var_list\l"]
  11 -> 33 [style=solid label="ID"]
  11 -> 34 [style=dashed label="var_list"]
  11 -> 35 [style=dashed label="variable"]
  12 [label="Estado 12\n\l 31 while_loop: WHILE • '(' ID logic_operator NUMBER ')' instructions ENDWHILE\l"]
  12 -> 36 [style=solid label="'('"]
  13 [label="Estado 13\n\l 23 block: IF • '(' ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l 37 if_statement: IF • '(' ID logic_operator NUMBER ')' instructions ENDIF\l 38             | IF • '(' ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l"]
  13 -> 37 [style=solid label="'('"]
  14 [label="Estado 14\n\l 39 for_loop: FOR • '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  14 -> 38 [style=solid label="'('"]
  15 [label="Estado 15\n\l  1 programa: subps corpo •\l"]
  15 -> "15R1" [style=solid]
 "15R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  16 [label="Estado 16\n\l 16 corpo: blocks •\l"]
  16 -> "16R16" [style=solid]
 "16R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  17 [label="Estado 17\n\l 18 blocks: block •\l 19       | block • blocks\l"]
  17 -> 10 [style=solid label="ID"]
  17 -> 11 [style=solid label="TYPE"]
  17 -> 12 [style=solid label="WHILE"]
  17 -> 13 [style=solid label="IF"]
  17 -> 14 [style=solid label="FOR"]
  17 -> 39 [style=dashed label="blocks"]
  17 -> 17 [style=dashed label="block"]
  17 -> 18 [style=dashed label="var_declarations"]
  17 -> 19 [style=dashed label="method_declaration"]
  17 -> 20 [style=dashed label="while_loop"]
  17 -> 21 [style=dashed label="instructions"]
  17 -> 22 [style=dashed label="if_statement"]
  17 -> 23 [style=dashed label="for_loop"]
  17 -> 24 [style=dashed label="direct_assignment"]
  17 -> 25 [style=dashed label="aritimetic_operations"]
  17 -> 26 [style=dashed label="sum"]
  17 -> "17R18d" [label="[ID, TYPE, WHILE, IF, FOR]", style=solid]
 "17R18d" [label="R18", fillcolor=5, shape=diamond, style=filled]
  17 -> "17R18" [style=solid]
 "17R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  18 [label="Estado 18\n\l 20 block: var_declarations •\l 32 instructions: var_declarations •\l"]
  18 -> "18R20" [style=solid]
 "18R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  18 -> "18R32d" [label="[$end, ID, TYPE, FUNC, ENDFUNC, WHILE, IF, FOR]", style=solid]
 "18R32d" [label="R32", fillcolor=5, shape=diamond, style=filled]
  19 [label="Estado 19\n\l 21 block: method_declaration •\l"]
  19 -> "19R21" [style=solid]
 "19R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  20 [label="Estado 20\n\l 30 method_declaration: while_loop •\l"]
  20 -> "20R30" [style=solid]
 "20R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  21 [label="Estado 21\n\l 22 block: instructions •\l"]
  21 -> "21R22" [style=solid]
 "21R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  22 [label="Estado 22\n\l 35 instructions: if_statement •\l"]
  22 -> "22R35" [style=solid]
 "22R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  23 [label="Estado 23\n\l 24 block: for_loop •\l 36 instructions: for_loop •\l"]
  23 -> "23R24" [style=solid]
 "23R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  23 -> "23R36d" [label="[$end, ID, TYPE, FUNC, ENDFUNC, WHILE, IF, FOR]", style=solid]
 "23R36d" [label="R36", fillcolor=5, shape=diamond, style=filled]
  24 [label="Estado 24\n\l 34 instructions: direct_assignment •\l"]
  24 -> "24R34" [style=solid]
 "24R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  25 [label="Estado 25\n\l 33 instructions: aritimetic_operations •\l"]
  25 -> "25R33" [style=solid]
 "25R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  26 [label="Estado 26\n\l 41 aritimetic_operations: sum •\l"]
  26 -> "26R41" [style=solid]
 "26R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  27 [label="Estado 27\n\l  3 subps: subp subps •\l"]
  27 -> "27R3" [style=solid]
 "27R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  28 [label="Estado 28\n\l  7 procedimento: FUNC ID '(' • args ')' corpo\l"]
  28 -> 40 [style=solid label="TYPE"]
  28 -> 41 [style=dashed label="args"]
  28 -> 42 [style=dashed label="args_aux"]
  28 -> "28R8" [style=solid]
 "28R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  29 [label="Estado 29\n\l  6 funcao: FUNC TYPE ID • '(' args ')' corpo ENDFUNC\l"]
  29 -> 43 [style=solid label="'('"]
  30 [label="Estado 30\n\l 40 direct_assignment: ID ASSIGNMENT • NUMBER\l 42 aritimetic_operations: ID ASSIGNMENT • sum\l"]
  30 -> 44 [style=solid label="ID"]
  30 -> 45 [style=solid label="NUMBER"]
  30 -> 46 [style=dashed label="sum"]
  31 [label="Estado 31\n\l 45 sum: ID ADITION_ASSIGNMENT • NUMBER\l"]
  31 -> 47 [style=solid label="NUMBER"]
  32 [label="Estado 32\n\l 43 sum: ID OP_PLUS • NUMBER\l 44    | ID OP_PLUS • ID\l"]
  32 -> 48 [style=solid label="ID"]
  32 -> 49 [style=solid label="NUMBER"]
  33 [label="Estado 33\n\l 28 variable: ID •\l 29         | ID • ASSIGNMENT NUMBER\l"]
  33 -> 50 [style=solid label="ASSIGNMENT"]
  33 -> "33R28" [style=solid]
 "33R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  34 [label="Estado 34\n\l 25 var_declarations: TYPE var_list •\l"]
  34 -> "34R25" [style=solid]
 "34R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  35 [label="Estado 35\n\l 26 var_list: variable • ',' var_list\l 27         | variable •\l"]
  35 -> 51 [style=solid label="','"]
  35 -> "35R27" [style=solid]
 "35R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  36 [label="Estado 36\n\l 31 while_loop: WHILE '(' • ID logic_operator NUMBER ')' instructions ENDWHILE\l"]
  36 -> 52 [style=solid label="ID"]
  37 [label="Estado 37\n\l 23 block: IF '(' • ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l 37 if_statement: IF '(' • ID logic_operator NUMBER ')' instructions ENDIF\l 38             | IF '(' • ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l"]
  37 -> 53 [style=solid label="ID"]
  38 [label="Estado 38\n\l 39 for_loop: FOR '(' • ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  38 -> 54 [style=solid label="ID"]
  39 [label="Estado 39\n\l 19 blocks: block blocks •\l"]
  39 -> "39R19" [style=solid]
 "39R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  40 [label="Estado 40\n\l 10 args_aux: TYPE • ids\l 11         | TYPE • ids ';' args_aux\l"]
  40 -> 55 [style=solid label="ID"]
  40 -> 56 [style=dashed label="ids"]
  40 -> 57 [style=dashed label="ids_aux"]
  40 -> "40R12" [style=solid]
 "40R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  41 [label="Estado 41\n\l  7 procedimento: FUNC ID '(' args • ')' corpo\l"]
  41 -> 58 [style=solid label="')'"]
  42 [label="Estado 42\n\l  9 args: args_aux •\l"]
  42 -> "42R9" [style=solid]
 "42R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  43 [label="Estado 43\n\l  6 funcao: FUNC TYPE ID '(' • args ')' corpo ENDFUNC\l"]
  43 -> 40 [style=solid label="TYPE"]
  43 -> 59 [style=dashed label="args"]
  43 -> 42 [style=dashed label="args_aux"]
  43 -> "43R8" [style=solid]
 "43R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  44 [label="Estado 44\n\l 43 sum: ID • OP_PLUS NUMBER\l 44    | ID • OP_PLUS ID\l 45    | ID • ADITION_ASSIGNMENT NUMBER\l"]
  44 -> 31 [style=solid label="ADITION_ASSIGNMENT"]
  44 -> 32 [style=solid label="OP_PLUS"]
  45 [label="Estado 45\n\l 40 direct_assignment: ID ASSIGNMENT NUMBER •\l"]
  45 -> "45R40" [style=solid]
 "45R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  46 [label="Estado 46\n\l 42 aritimetic_operations: ID ASSIGNMENT sum •\l"]
  46 -> "46R42" [style=solid]
 "46R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  47 [label="Estado 47\n\l 45 sum: ID ADITION_ASSIGNMENT NUMBER •\l"]
  47 -> "47R45" [style=solid]
 "47R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  48 [label="Estado 48\n\l 44 sum: ID OP_PLUS ID •\l"]
  48 -> "48R44" [style=solid]
 "48R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  49 [label="Estado 49\n\l 43 sum: ID OP_PLUS NUMBER •\l"]
  49 -> "49R43" [style=solid]
 "49R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  50 [label="Estado 50\n\l 29 variable: ID ASSIGNMENT • NUMBER\l"]
  50 -> 60 [style=solid label="NUMBER"]
  51 [label="Estado 51\n\l 26 var_list: variable ',' • var_list\l"]
  51 -> 33 [style=solid label="ID"]
  51 -> 61 [style=dashed label="var_list"]
  51 -> 35 [style=dashed label="variable"]
  52 [label="Estado 52\n\l 31 while_loop: WHILE '(' ID • logic_operator NUMBER ')' instructions ENDWHILE\l"]
  52 -> 62 [style=solid label="EQUALS"]
  52 -> 63 [style=solid label="NOT_EQUALS"]
  52 -> 64 [style=solid label="GREATER_THAN"]
  52 -> 65 [style=solid label="LESS_THAN"]
  52 -> 66 [style=solid label="GREATER_THAN_OR_EQUAL"]
  52 -> 67 [style=solid label="LESS_THAN_OR_EQUAL"]
  52 -> 68 [style=dashed label="logic_operator"]
  53 [label="Estado 53\n\l 23 block: IF '(' ID • logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l 37 if_statement: IF '(' ID • logic_operator NUMBER ')' instructions ENDIF\l 38             | IF '(' ID • logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l"]
  53 -> 62 [style=solid label="EQUALS"]
  53 -> 63 [style=solid label="NOT_EQUALS"]
  53 -> 64 [style=solid label="GREATER_THAN"]
  53 -> 65 [style=solid label="LESS_THAN"]
  53 -> 66 [style=solid label="GREATER_THAN_OR_EQUAL"]
  53 -> 67 [style=solid label="LESS_THAN_OR_EQUAL"]
  53 -> 69 [style=dashed label="logic_operator"]
  54 [label="Estado 54\n\l 39 for_loop: FOR '(' ID • ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  54 -> 70 [style=solid label="ASSIGNMENT"]
  55 [label="Estado 55\n\l 14 ids_aux: ID •\l 15        | ID • ',' ids_aux\l"]
  55 -> 71 [style=solid label="','"]
  55 -> "55R14" [style=solid]
 "55R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  56 [label="Estado 56\n\l 10 args_aux: TYPE ids •\l 11         | TYPE ids • ';' args_aux\l"]
  56 -> 72 [style=solid label="';'"]
  56 -> "56R10" [style=solid]
 "56R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  57 [label="Estado 57\n\l 13 ids: ids_aux •\l"]
  57 -> "57R13" [style=solid]
 "57R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  58 [label="Estado 58\n\l  7 procedimento: FUNC ID '(' args ')' • corpo\l"]
  58 -> 10 [style=solid label="ID"]
  58 -> 11 [style=solid label="TYPE"]
  58 -> 12 [style=solid label="WHILE"]
  58 -> 13 [style=solid label="IF"]
  58 -> 14 [style=solid label="FOR"]
  58 -> 73 [style=dashed label="corpo"]
  58 -> 16 [style=dashed label="blocks"]
  58 -> 17 [style=dashed label="block"]
  58 -> 18 [style=dashed label="var_declarations"]
  58 -> 19 [style=dashed label="method_declaration"]
  58 -> 20 [style=dashed label="while_loop"]
  58 -> 21 [style=dashed label="instructions"]
  58 -> 22 [style=dashed label="if_statement"]
  58 -> 23 [style=dashed label="for_loop"]
  58 -> 24 [style=dashed label="direct_assignment"]
  58 -> 25 [style=dashed label="aritimetic_operations"]
  58 -> 26 [style=dashed label="sum"]
  58 -> "58R17d" [label="[ID, TYPE, WHILE, IF, FOR]", style=solid]
 "58R17d" [label="R17", fillcolor=5, shape=diamond, style=filled]
  58 -> "58R17" [style=solid]
 "58R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  59 [label="Estado 59\n\l  6 funcao: FUNC TYPE ID '(' args • ')' corpo ENDFUNC\l"]
  59 -> 74 [style=solid label="')'"]
  60 [label="Estado 60\n\l 29 variable: ID ASSIGNMENT NUMBER •\l"]
  60 -> "60R29" [style=solid]
 "60R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  61 [label="Estado 61\n\l 26 var_list: variable ',' var_list •\l"]
  61 -> "61R26" [style=solid]
 "61R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  62 [label="Estado 62\n\l 46 logic_operator: EQUALS •\l"]
  62 -> "62R46" [style=solid]
 "62R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  63 [label="Estado 63\n\l 47 logic_operator: NOT_EQUALS •\l"]
  63 -> "63R47" [style=solid]
 "63R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  64 [label="Estado 64\n\l 48 logic_operator: GREATER_THAN •\l"]
  64 -> "64R48" [style=solid]
 "64R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  65 [label="Estado 65\n\l 49 logic_operator: LESS_THAN •\l"]
  65 -> "65R49" [style=solid]
 "65R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  66 [label="Estado 66\n\l 50 logic_operator: GREATER_THAN_OR_EQUAL •\l"]
  66 -> "66R50" [style=solid]
 "66R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  67 [label="Estado 67\n\l 51 logic_operator: LESS_THAN_OR_EQUAL •\l"]
  67 -> "67R51" [style=solid]
 "67R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  68 [label="Estado 68\n\l 31 while_loop: WHILE '(' ID logic_operator • NUMBER ')' instructions ENDWHILE\l"]
  68 -> 75 [style=solid label="NUMBER"]
  69 [label="Estado 69\n\l 23 block: IF '(' ID logic_operator • NUMBER ')' instructions ELSE instructions ENDIF\l 37 if_statement: IF '(' ID logic_operator • NUMBER ')' instructions ENDIF\l 38             | IF '(' ID logic_operator • NUMBER ')' instructions ELSE instructions ENDIF\l"]
  69 -> 76 [style=solid label="NUMBER"]
  70 [label="Estado 70\n\l 39 for_loop: FOR '(' ID ASSIGNMENT • NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  70 -> 77 [style=solid label="NUMBER"]
  71 [label="Estado 71\n\l 15 ids_aux: ID ',' • ids_aux\l"]
  71 -> 55 [style=solid label="ID"]
  71 -> 78 [style=dashed label="ids_aux"]
  72 [label="Estado 72\n\l 11 args_aux: TYPE ids ';' • args_aux\l"]
  72 -> 40 [style=solid label="TYPE"]
  72 -> 79 [style=dashed label="args_aux"]
  73 [label="Estado 73\n\l  7 procedimento: FUNC ID '(' args ')' corpo •\l"]
  73 -> "73R7" [style=solid]
 "73R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  74 [label="Estado 74\n\l  6 funcao: FUNC TYPE ID '(' args ')' • corpo ENDFUNC\l"]
  74 -> 10 [style=solid label="ID"]
  74 -> 11 [style=solid label="TYPE"]
  74 -> 12 [style=solid label="WHILE"]
  74 -> 13 [style=solid label="IF"]
  74 -> 14 [style=solid label="FOR"]
  74 -> 80 [style=dashed label="corpo"]
  74 -> 16 [style=dashed label="blocks"]
  74 -> 17 [style=dashed label="block"]
  74 -> 18 [style=dashed label="var_declarations"]
  74 -> 19 [style=dashed label="method_declaration"]
  74 -> 20 [style=dashed label="while_loop"]
  74 -> 21 [style=dashed label="instructions"]
  74 -> 22 [style=dashed label="if_statement"]
  74 -> 23 [style=dashed label="for_loop"]
  74 -> 24 [style=dashed label="direct_assignment"]
  74 -> 25 [style=dashed label="aritimetic_operations"]
  74 -> 26 [style=dashed label="sum"]
  74 -> "74R17" [style=solid]
 "74R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  75 [label="Estado 75\n\l 31 while_loop: WHILE '(' ID logic_operator NUMBER • ')' instructions ENDWHILE\l"]
  75 -> 81 [style=solid label="')'"]
  76 [label="Estado 76\n\l 23 block: IF '(' ID logic_operator NUMBER • ')' instructions ELSE instructions ENDIF\l 37 if_statement: IF '(' ID logic_operator NUMBER • ')' instructions ENDIF\l 38             | IF '(' ID logic_operator NUMBER • ')' instructions ELSE instructions ENDIF\l"]
  76 -> 82 [style=solid label="')'"]
  77 [label="Estado 77\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER • ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  77 -> 83 [style=solid label="';'"]
  78 [label="Estado 78\n\l 15 ids_aux: ID ',' ids_aux •\l"]
  78 -> "78R15" [style=solid]
 "78R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  79 [label="Estado 79\n\l 11 args_aux: TYPE ids ';' args_aux •\l"]
  79 -> "79R11" [style=solid]
 "79R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  80 [label="Estado 80\n\l  6 funcao: FUNC TYPE ID '(' args ')' corpo • ENDFUNC\l"]
  80 -> 84 [style=solid label="ENDFUNC"]
  81 [label="Estado 81\n\l 31 while_loop: WHILE '(' ID logic_operator NUMBER ')' • instructions ENDWHILE\l"]
  81 -> 10 [style=solid label="ID"]
  81 -> 11 [style=solid label="TYPE"]
  81 -> 85 [style=solid label="IF"]
  81 -> 14 [style=solid label="FOR"]
  81 -> 86 [style=dashed label="var_declarations"]
  81 -> 87 [style=dashed label="instructions"]
  81 -> 22 [style=dashed label="if_statement"]
  81 -> 88 [style=dashed label="for_loop"]
  81 -> 24 [style=dashed label="direct_assignment"]
  81 -> 25 [style=dashed label="aritimetic_operations"]
  81 -> 26 [style=dashed label="sum"]
  82 [label="Estado 82\n\l 23 block: IF '(' ID logic_operator NUMBER ')' • instructions ELSE instructions ENDIF\l 37 if_statement: IF '(' ID logic_operator NUMBER ')' • instructions ENDIF\l 38             | IF '(' ID logic_operator NUMBER ')' • instructions ELSE instructions ENDIF\l"]
  82 -> 10 [style=solid label="ID"]
  82 -> 11 [style=solid label="TYPE"]
  82 -> 85 [style=solid label="IF"]
  82 -> 14 [style=solid label="FOR"]
  82 -> 86 [style=dashed label="var_declarations"]
  82 -> 89 [style=dashed label="instructions"]
  82 -> 22 [style=dashed label="if_statement"]
  82 -> 88 [style=dashed label="for_loop"]
  82 -> 24 [style=dashed label="direct_assignment"]
  82 -> 25 [style=dashed label="aritimetic_operations"]
  82 -> 26 [style=dashed label="sum"]
  83 [label="Estado 83\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' • ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  83 -> 90 [style=solid label="ID"]
  84 [label="Estado 84\n\l  6 funcao: FUNC TYPE ID '(' args ')' corpo ENDFUNC •\l"]
  84 -> "84R6" [style=solid]
 "84R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  85 [label="Estado 85\n\l 37 if_statement: IF • '(' ID logic_operator NUMBER ')' instructions ENDIF\l 38             | IF • '(' ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l"]
  85 -> 91 [style=solid label="'('"]
  86 [label="Estado 86\n\l 32 instructions: var_declarations •\l"]
  86 -> "86R32" [style=solid]
 "86R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  87 [label="Estado 87\n\l 31 while_loop: WHILE '(' ID logic_operator NUMBER ')' instructions • ENDWHILE\l"]
  87 -> 92 [style=solid label="ENDWHILE"]
  88 [label="Estado 88\n\l 36 instructions: for_loop •\l"]
  88 -> "88R36" [style=solid]
 "88R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  89 [label="Estado 89\n\l 23 block: IF '(' ID logic_operator NUMBER ')' instructions • ELSE instructions ENDIF\l 37 if_statement: IF '(' ID logic_operator NUMBER ')' instructions • ENDIF\l 38             | IF '(' ID logic_operator NUMBER ')' instructions • ELSE instructions ENDIF\l"]
  89 -> 93 [style=solid label="ELSE"]
  89 -> 94 [style=solid label="ENDIF"]
  90 [label="Estado 90\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID • logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  90 -> 62 [style=solid label="EQUALS"]
  90 -> 63 [style=solid label="NOT_EQUALS"]
  90 -> 64 [style=solid label="GREATER_THAN"]
  90 -> 65 [style=solid label="LESS_THAN"]
  90 -> 66 [style=solid label="GREATER_THAN_OR_EQUAL"]
  90 -> 67 [style=solid label="LESS_THAN_OR_EQUAL"]
  90 -> 95 [style=dashed label="logic_operator"]
  91 [label="Estado 91\n\l 37 if_statement: IF '(' • ID logic_operator NUMBER ')' instructions ENDIF\l 38             | IF '(' • ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l"]
  91 -> 96 [style=solid label="ID"]
  92 [label="Estado 92\n\l 31 while_loop: WHILE '(' ID logic_operator NUMBER ')' instructions ENDWHILE •\l"]
  92 -> "92R31" [style=solid]
 "92R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  93 [label="Estado 93\n\l 23 block: IF '(' ID logic_operator NUMBER ')' instructions ELSE • instructions ENDIF\l 38 if_statement: IF '(' ID logic_operator NUMBER ')' instructions ELSE • instructions ENDIF\l"]
  93 -> 10 [style=solid label="ID"]
  93 -> 11 [style=solid label="TYPE"]
  93 -> 85 [style=solid label="IF"]
  93 -> 14 [style=solid label="FOR"]
  93 -> 86 [style=dashed label="var_declarations"]
  93 -> 97 [style=dashed label="instructions"]
  93 -> 22 [style=dashed label="if_statement"]
  93 -> 88 [style=dashed label="for_loop"]
  93 -> 24 [style=dashed label="direct_assignment"]
  93 -> 25 [style=dashed label="aritimetic_operations"]
  93 -> 26 [style=dashed label="sum"]
  94 [label="Estado 94\n\l 37 if_statement: IF '(' ID logic_operator NUMBER ')' instructions ENDIF •\l"]
  94 -> "94R37" [style=solid]
 "94R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  95 [label="Estado 95\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator • NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  95 -> 98 [style=solid label="NUMBER"]
  96 [label="Estado 96\n\l 37 if_statement: IF '(' ID • logic_operator NUMBER ')' instructions ENDIF\l 38             | IF '(' ID • logic_operator NUMBER ')' instructions ELSE instructions ENDIF\l"]
  96 -> 62 [style=solid label="EQUALS"]
  96 -> 63 [style=solid label="NOT_EQUALS"]
  96 -> 64 [style=solid label="GREATER_THAN"]
  96 -> 65 [style=solid label="LESS_THAN"]
  96 -> 66 [style=solid label="GREATER_THAN_OR_EQUAL"]
  96 -> 67 [style=solid label="LESS_THAN_OR_EQUAL"]
  96 -> 99 [style=dashed label="logic_operator"]
  97 [label="Estado 97\n\l 23 block: IF '(' ID logic_operator NUMBER ')' instructions ELSE instructions • ENDIF\l 38 if_statement: IF '(' ID logic_operator NUMBER ')' instructions ELSE instructions • ENDIF\l"]
  97 -> 100 [style=solid label="ENDIF"]
  98 [label="Estado 98\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER • ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  98 -> 101 [style=solid label="';'"]
  99 [label="Estado 99\n\l 37 if_statement: IF '(' ID logic_operator • NUMBER ')' instructions ENDIF\l 38             | IF '(' ID logic_operator • NUMBER ')' instructions ELSE instructions ENDIF\l"]
  99 -> 102 [style=solid label="NUMBER"]
  100 [label="Estado 100\n\l 23 block: IF '(' ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF •\l 38 if_statement: IF '(' ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF •\l"]
  100 -> "100R23" [style=solid]
 "100R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  100 -> "100R38d" [label="[$end, ID, TYPE, FUNC, ENDFUNC, WHILE, IF, FOR]", style=solid]
 "100R38d" [label="R38", fillcolor=5, shape=diamond, style=filled]
  101 [label="Estado 101\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' • ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  101 -> 103 [style=solid label="ID"]
  102 [label="Estado 102\n\l 37 if_statement: IF '(' ID logic_operator NUMBER • ')' instructions ENDIF\l 38             | IF '(' ID logic_operator NUMBER • ')' instructions ELSE instructions ENDIF\l"]
  102 -> 104 [style=solid label="')'"]
  103 [label="Estado 103\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID • ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR\l"]
  103 -> 105 [style=solid label="ADITION_ASSIGNMENT"]
  104 [label="Estado 104\n\l 37 if_statement: IF '(' ID logic_operator NUMBER ')' • instructions ENDIF\l 38             | IF '(' ID logic_operator NUMBER ')' • instructions ELSE instructions ENDIF\l"]
  104 -> 10 [style=solid label="ID"]
  104 -> 11 [style=solid label="TYPE"]
  104 -> 85 [style=solid label="IF"]
  104 -> 14 [style=solid label="FOR"]
  104 -> 86 [style=dashed label="var_declarations"]
  104 -> 106 [style=dashed label="instructions"]
  104 -> 22 [style=dashed label="if_statement"]
  104 -> 88 [style=dashed label="for_loop"]
  104 -> 24 [style=dashed label="direct_assignment"]
  104 -> 25 [style=dashed label="aritimetic_operations"]
  104 -> 26 [style=dashed label="sum"]
  105 [label="Estado 105\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT • NUMBER ')' instructions ENDFOR\l"]
  105 -> 107 [style=solid label="NUMBER"]
  106 [label="Estado 106\n\l 37 if_statement: IF '(' ID logic_operator NUMBER ')' instructions • ENDIF\l 38             | IF '(' ID logic_operator NUMBER ')' instructions • ELSE instructions ENDIF\l"]
  106 -> 108 [style=solid label="ELSE"]
  106 -> 94 [style=solid label="ENDIF"]
  107 [label="Estado 107\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER • ')' instructions ENDFOR\l"]
  107 -> 109 [style=solid label="')'"]
  108 [label="Estado 108\n\l 38 if_statement: IF '(' ID logic_operator NUMBER ')' instructions ELSE • instructions ENDIF\l"]
  108 -> 10 [style=solid label="ID"]
  108 -> 11 [style=solid label="TYPE"]
  108 -> 85 [style=solid label="IF"]
  108 -> 14 [style=solid label="FOR"]
  108 -> 86 [style=dashed label="var_declarations"]
  108 -> 110 [style=dashed label="instructions"]
  108 -> 22 [style=dashed label="if_statement"]
  108 -> 88 [style=dashed label="for_loop"]
  108 -> 24 [style=dashed label="direct_assignment"]
  108 -> 25 [style=dashed label="aritimetic_operations"]
  108 -> 26 [style=dashed label="sum"]
  109 [label="Estado 109\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' • instructions ENDFOR\l"]
  109 -> 10 [style=solid label="ID"]
  109 -> 11 [style=solid label="TYPE"]
  109 -> 85 [style=solid label="IF"]
  109 -> 14 [style=solid label="FOR"]
  109 -> 86 [style=dashed label="var_declarations"]
  109 -> 111 [style=dashed label="instructions"]
  109 -> 22 [style=dashed label="if_statement"]
  109 -> 88 [style=dashed label="for_loop"]
  109 -> 24 [style=dashed label="direct_assignment"]
  109 -> 25 [style=dashed label="aritimetic_operations"]
  109 -> 26 [style=dashed label="sum"]
  110 [label="Estado 110\n\l 38 if_statement: IF '(' ID logic_operator NUMBER ')' instructions ELSE instructions • ENDIF\l"]
  110 -> 112 [style=solid label="ENDIF"]
  111 [label="Estado 111\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions • ENDFOR\l"]
  111 -> 113 [style=solid label="ENDFOR"]
  112 [label="Estado 112\n\l 38 if_statement: IF '(' ID logic_operator NUMBER ')' instructions ELSE instructions ENDIF •\l"]
  112 -> "112R38" [style=solid]
 "112R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  113 [label="Estado 113\n\l 39 for_loop: FOR '(' ID ASSIGNMENT NUMBER ';' ID logic_operator NUMBER ';' ID ADITION_ASSIGNMENT NUMBER ')' instructions ENDFOR •\l"]
  113 -> "113R39" [style=solid]
 "113R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
}
