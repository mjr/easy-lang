Terminals unused in grammar

    NUMBER
    WHILE
    ENDWHILE
    IF
    ELSE
    ENDIF
    FOR
    ENDFOR
    EQUALS
    NOT_EQUALS
    GREATER_THAN
    LESS_THAN
    GREATER_THAN_OR_EQUAL
    LESS_THAN_OR_EQUAL
    OP_PLUS
    OP_MINUS
    OP_DIV
    OP_MULT
    DECREMENT
    INCREMENT
    SUBTRACTION_ASSIGNMENT
    ADITION_ASSIGNMENT
    LOGICAL_AND
    LOGICAL_OR


Grammar

    0 $accept: programa $end

    1 programa: subps instructions

    2 subps: %empty
    3      | subp subps

    4 subp: funcao
    5     | procedimento

    6 funcao: FUNC TYPE ID '(' args ')' instructions ENDFUNC

    7 procedimento: FUNC ID '(' args ')' instructions

    8 args: %empty
    9     | args_aux

   10 args_aux: TYPE ids
   11         | TYPE ids ';' args_aux

   12 ids: %empty
   13    | ids_aux

   14 ids_aux: ID
   15        | ID ',' ids_aux

   16 instructions: var_declarations

   17 var_declarations: TYPE var_list

   18 var_list: variable ',' var_list
   19         | variable

   20 variable: ID
   21         | ID LBRACKET ID RBRACKET
   22         | ID ASSIGNMENT expression
   23         | ID LBRACKET ID RBRACKET ASSIGNMENT expression

   24 expression: ID ASSIGNMENT expression
   25           | ID LBRACKET expression RBRACKET
   26           | ID


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 6 7
    ')' (41) 6 7
    ',' (44) 15 18
    ';' (59) 11
    error (256)
    ID <sValue> (258) 6 7 14 15 20 21 22 23 24 25 26
    TYPE <sValue> (259) 6 10 11 17
    NUMBER <iValue> (260)
    FUNC (261) 6 7
    ENDFUNC (262) 6
    WHILE (263)
    ENDWHILE (264)
    IF (265)
    ELSE (266)
    ENDIF (267)
    ASSIGNMENT (268) 22 23 24
    FOR (269)
    ENDFOR (270)
    EQUALS (271)
    NOT_EQUALS (272)
    GREATER_THAN (273)
    LESS_THAN (274)
    GREATER_THAN_OR_EQUAL (275)
    LESS_THAN_OR_EQUAL (276)
    OP_PLUS (277)
    OP_MINUS (278)
    OP_DIV (279)
    OP_MULT (280)
    LBRACKET (281) 21 23 25
    RBRACKET (282) 21 23 25
    DECREMENT (283)
    INCREMENT (284)
    SUBTRACTION_ASSIGNMENT (285)
    ADITION_ASSIGNMENT (286)
    LOGICAL_AND (287)
    LOGICAL_OR (288)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    programa (39)
        on left: 1
        on right: 0
    subps <rec> (40)
        on left: 2 3
        on right: 1 3
    subp <rec> (41)
        on left: 4 5
        on right: 3
    funcao <rec> (42)
        on left: 6
        on right: 4
    procedimento <rec> (43)
        on left: 7
        on right: 5
    args <rec> (44)
        on left: 8 9
        on right: 6 7
    args_aux <rec> (45)
        on left: 10 11
        on right: 9 11
    ids <rec> (46)
        on left: 12 13
        on right: 10 11
    ids_aux <rec> (47)
        on left: 14 15
        on right: 13 15
    instructions <rec> (48)
        on left: 16
        on right: 1 6 7
    var_declarations <rec> (49)
        on left: 17
        on right: 16
    var_list <rec> (50)
        on left: 18 19
        on right: 17 18
    variable <rec> (51)
        on left: 20 21 22 23
        on right: 18 19
    expression <rec> (52)
        on left: 24 25 26
        on right: 22 23 24 25


State 0

    0 $accept: . programa $end

    FUNC  shift, and go to state 1

    $default  reduce using rule 2 (subps)

    programa      go to state 2
    subps         go to state 3
    subp          go to state 4
    funcao        go to state 5
    procedimento  go to state 6


State 1

    6 funcao: FUNC . TYPE ID '(' args ')' instructions ENDFUNC
    7 procedimento: FUNC . ID '(' args ')' instructions

    ID    shift, and go to state 7
    TYPE  shift, and go to state 8


State 2

    0 $accept: programa . $end

    $end  shift, and go to state 9


State 3

    1 programa: subps . instructions

    TYPE  shift, and go to state 10

    instructions      go to state 11
    var_declarations  go to state 12


State 4

    3 subps: subp . subps

    FUNC  shift, and go to state 1

    $default  reduce using rule 2 (subps)

    subps         go to state 13
    subp          go to state 4
    funcao        go to state 5
    procedimento  go to state 6


State 5

    4 subp: funcao .

    $default  reduce using rule 4 (subp)


State 6

    5 subp: procedimento .

    $default  reduce using rule 5 (subp)


State 7

    7 procedimento: FUNC ID . '(' args ')' instructions

    '('  shift, and go to state 14


State 8

    6 funcao: FUNC TYPE . ID '(' args ')' instructions ENDFUNC

    ID  shift, and go to state 15


State 9

    0 $accept: programa $end .

    $default  accept


State 10

   17 var_declarations: TYPE . var_list

    ID  shift, and go to state 16

    var_list  go to state 17
    variable  go to state 18


State 11

    1 programa: subps instructions .

    $default  reduce using rule 1 (programa)


State 12

   16 instructions: var_declarations .

    $default  reduce using rule 16 (instructions)


State 13

    3 subps: subp subps .

    $default  reduce using rule 3 (subps)


State 14

    7 procedimento: FUNC ID '(' . args ')' instructions

    TYPE  shift, and go to state 19

    $default  reduce using rule 8 (args)

    args      go to state 20
    args_aux  go to state 21


State 15

    6 funcao: FUNC TYPE ID . '(' args ')' instructions ENDFUNC

    '('  shift, and go to state 22


State 16

   20 variable: ID .
   21         | ID . LBRACKET ID RBRACKET
   22         | ID . ASSIGNMENT expression
   23         | ID . LBRACKET ID RBRACKET ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 23
    LBRACKET    shift, and go to state 24

    $default  reduce using rule 20 (variable)


State 17

   17 var_declarations: TYPE var_list .

    $default  reduce using rule 17 (var_declarations)


State 18

   18 var_list: variable . ',' var_list
   19         | variable .

    ','  shift, and go to state 25

    $default  reduce using rule 19 (var_list)


State 19

   10 args_aux: TYPE . ids
   11         | TYPE . ids ';' args_aux

    ID  shift, and go to state 26

    $default  reduce using rule 12 (ids)

    ids      go to state 27
    ids_aux  go to state 28


State 20

    7 procedimento: FUNC ID '(' args . ')' instructions

    ')'  shift, and go to state 29


State 21

    9 args: args_aux .

    $default  reduce using rule 9 (args)


State 22

    6 funcao: FUNC TYPE ID '(' . args ')' instructions ENDFUNC

    TYPE  shift, and go to state 19

    $default  reduce using rule 8 (args)

    args      go to state 30
    args_aux  go to state 21


State 23

   22 variable: ID ASSIGNMENT . expression

    ID  shift, and go to state 31

    expression  go to state 32


State 24

   21 variable: ID LBRACKET . ID RBRACKET
   23         | ID LBRACKET . ID RBRACKET ASSIGNMENT expression

    ID  shift, and go to state 33


State 25

   18 var_list: variable ',' . var_list

    ID  shift, and go to state 16

    var_list  go to state 34
    variable  go to state 18


State 26

   14 ids_aux: ID .
   15        | ID . ',' ids_aux

    ','  shift, and go to state 35

    $default  reduce using rule 14 (ids_aux)


State 27

   10 args_aux: TYPE ids .
   11         | TYPE ids . ';' args_aux

    ';'  shift, and go to state 36

    $default  reduce using rule 10 (args_aux)


State 28

   13 ids: ids_aux .

    $default  reduce using rule 13 (ids)


State 29

    7 procedimento: FUNC ID '(' args ')' . instructions

    TYPE  shift, and go to state 10

    instructions      go to state 37
    var_declarations  go to state 12


State 30

    6 funcao: FUNC TYPE ID '(' args . ')' instructions ENDFUNC

    ')'  shift, and go to state 38


State 31

   24 expression: ID . ASSIGNMENT expression
   25           | ID . LBRACKET expression RBRACKET
   26           | ID .

    ASSIGNMENT  shift, and go to state 39
    LBRACKET    shift, and go to state 40

    $default  reduce using rule 26 (expression)


State 32

   22 variable: ID ASSIGNMENT expression .

    $default  reduce using rule 22 (variable)


State 33

   21 variable: ID LBRACKET ID . RBRACKET
   23         | ID LBRACKET ID . RBRACKET ASSIGNMENT expression

    RBRACKET  shift, and go to state 41


State 34

   18 var_list: variable ',' var_list .

    $default  reduce using rule 18 (var_list)


State 35

   15 ids_aux: ID ',' . ids_aux

    ID  shift, and go to state 26

    ids_aux  go to state 42


State 36

   11 args_aux: TYPE ids ';' . args_aux

    TYPE  shift, and go to state 19

    args_aux  go to state 43


State 37

    7 procedimento: FUNC ID '(' args ')' instructions .

    $default  reduce using rule 7 (procedimento)


State 38

    6 funcao: FUNC TYPE ID '(' args ')' . instructions ENDFUNC

    TYPE  shift, and go to state 10

    instructions      go to state 44
    var_declarations  go to state 12


State 39

   24 expression: ID ASSIGNMENT . expression

    ID  shift, and go to state 31

    expression  go to state 45


State 40

   25 expression: ID LBRACKET . expression RBRACKET

    ID  shift, and go to state 31

    expression  go to state 46


State 41

   21 variable: ID LBRACKET ID RBRACKET .
   23         | ID LBRACKET ID RBRACKET . ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 47

    $default  reduce using rule 21 (variable)


State 42

   15 ids_aux: ID ',' ids_aux .

    $default  reduce using rule 15 (ids_aux)


State 43

   11 args_aux: TYPE ids ';' args_aux .

    $default  reduce using rule 11 (args_aux)


State 44

    6 funcao: FUNC TYPE ID '(' args ')' instructions . ENDFUNC

    ENDFUNC  shift, and go to state 48


State 45

   24 expression: ID ASSIGNMENT expression .

    $default  reduce using rule 24 (expression)


State 46

   25 expression: ID LBRACKET expression . RBRACKET

    RBRACKET  shift, and go to state 49


State 47

   23 variable: ID LBRACKET ID RBRACKET ASSIGNMENT . expression

    ID  shift, and go to state 31

    expression  go to state 50


State 48

    6 funcao: FUNC TYPE ID '(' args ')' instructions ENDFUNC .

    $default  reduce using rule 6 (funcao)


State 49

   25 expression: ID LBRACKET expression RBRACKET .

    $default  reduce using rule 25 (expression)


State 50

   23 variable: ID LBRACKET ID RBRACKET ASSIGNMENT expression .

    $default  reduce using rule 23 (variable)
