// Generated by GNU Bison 3.5.1.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "parser.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: . programa $end\l"]
  0 -> 1 [style=solid label="FUNC"]
  0 -> 2 [style=dashed label="programa"]
  0 -> 3 [style=dashed label="subps"]
  0 -> 4 [style=dashed label="subp"]
  0 -> 5 [style=dashed label="funcao"]
  0 -> 6 [style=dashed label="procedimento"]
  0 -> "0R2" [style=solid]
 "0R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  1 [label="State 1\n\l  6 funcao: FUNC . TYPE ID '(' args ')' instructions ENDFUNC\l  7 procedimento: FUNC . ID '(' args ')' instructions ENDFUNC\l"]
  1 -> 7 [style=solid label="ID"]
  1 -> 8 [style=solid label="TYPE"]
  2 [label="State 2\n\l  0 $accept: programa . $end\l"]
  2 -> 9 [style=solid label="$end"]
  3 [label="State 3\n\l  1 programa: subps . instructions\l"]
  3 -> 10 [style=solid label="ID"]
  3 -> 11 [style=solid label="TYPE"]
  3 -> 12 [style=solid label="WHILE"]
  3 -> 13 [style=solid label="IF"]
  3 -> 14 [style=solid label="FOR"]
  3 -> 15 [style=dashed label="instructions"]
  3 -> 16 [style=dashed label="var_declarations"]
  3 -> 17 [style=dashed label="direct_assignment"]
  3 -> 18 [style=dashed label="unary_op"]
  3 -> 19 [style=dashed label="conditional_if"]
  3 -> 20 [style=dashed label="while_loop"]
  3 -> 21 [style=dashed label="for_loop"]
  3 -> "3R13" [style=solid]
 "3R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  4 [label="State 4\n\l  3 subps: subp . subps\l"]
  4 -> 1 [style=solid label="FUNC"]
  4 -> 22 [style=dashed label="subps"]
  4 -> 4 [style=dashed label="subp"]
  4 -> 5 [style=dashed label="funcao"]
  4 -> 6 [style=dashed label="procedimento"]
  4 -> "4R2" [style=solid]
 "4R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  5 [label="State 5\n\l  4 subp: funcao .\l"]
  5 -> "5R4" [style=solid]
 "5R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l  5 subp: procedimento .\l"]
  6 -> "6R5" [style=solid]
 "6R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l  7 procedimento: FUNC ID . '(' args ')' instructions ENDFUNC\l"]
  7 -> 23 [style=solid label="'('"]
  8 [label="State 8\n\l  6 funcao: FUNC TYPE . ID '(' args ')' instructions ENDFUNC\l"]
  8 -> 24 [style=solid label="ID"]
  9 [label="State 9\n\l  0 $accept: programa $end .\l"]
  9 -> "9R0" [style=solid]
 "9R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  10 [label="State 10\n\l 41 direct_assignment: ID . ASSIGNMENT expression\l 42 unary_op: ID . ADITION_ASSIGNMENT\l 43         | ID . INCREMENT\l 44         | ID . DECREMENT\l 45         | ID . SUBTRACTION_ASSIGNMENT\l"]
  10 -> 25 [style=solid label="ASSIGNMENT"]
  10 -> 26 [style=solid label="DECREMENT"]
  10 -> 27 [style=solid label="INCREMENT"]
  10 -> 28 [style=solid label="SUBTRACTION_ASSIGNMENT"]
  10 -> 29 [style=solid label="ADITION_ASSIGNMENT"]
  11 [label="State 11\n\l 20 var_declarations: TYPE . var_list\l"]
  11 -> 30 [style=solid label="ID"]
  11 -> 31 [style=dashed label="var_list"]
  11 -> 32 [style=dashed label="variable"]
  12 [label="State 12\n\l 48 while_loop: WHILE . '(' expression ')' instructions ENDWHILE\l"]
  12 -> 33 [style=solid label="'('"]
  13 [label="State 13\n\l 46 conditional_if: IF . '(' expression ')' instructions ENDIF\l 47               | IF . '(' expression ')' instructions ELSE instructions ENDIF\l"]
  13 -> 34 [style=solid label="'('"]
  14 [label="State 14\n\l 49 for_loop: FOR . '(' var_declarations ';' expression ';' unary_op ')' instructions ENDFOR\l"]
  14 -> 35 [style=solid label="'('"]
  15 [label="State 15\n\l  1 programa: subps instructions .\l"]
  15 -> "15R1" [style=solid]
 "15R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l 14 instructions: var_declarations . instructions\l"]
  16 -> 10 [style=solid label="ID"]
  16 -> 11 [style=solid label="TYPE"]
  16 -> 12 [style=solid label="WHILE"]
  16 -> 13 [style=solid label="IF"]
  16 -> 14 [style=solid label="FOR"]
  16 -> 36 [style=dashed label="instructions"]
  16 -> 16 [style=dashed label="var_declarations"]
  16 -> 17 [style=dashed label="direct_assignment"]
  16 -> 18 [style=dashed label="unary_op"]
  16 -> 19 [style=dashed label="conditional_if"]
  16 -> 20 [style=dashed label="while_loop"]
  16 -> 21 [style=dashed label="for_loop"]
  16 -> "16R13" [style=solid]
 "16R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l 15 instructions: direct_assignment . instructions\l"]
  17 -> 10 [style=solid label="ID"]
  17 -> 11 [style=solid label="TYPE"]
  17 -> 12 [style=solid label="WHILE"]
  17 -> 13 [style=solid label="IF"]
  17 -> 14 [style=solid label="FOR"]
  17 -> 37 [style=dashed label="instructions"]
  17 -> 16 [style=dashed label="var_declarations"]
  17 -> 17 [style=dashed label="direct_assignment"]
  17 -> 18 [style=dashed label="unary_op"]
  17 -> 19 [style=dashed label="conditional_if"]
  17 -> 20 [style=dashed label="while_loop"]
  17 -> 21 [style=dashed label="for_loop"]
  17 -> "17R13" [style=solid]
 "17R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l 16 instructions: unary_op . instructions\l"]
  18 -> 10 [style=solid label="ID"]
  18 -> 11 [style=solid label="TYPE"]
  18 -> 12 [style=solid label="WHILE"]
  18 -> 13 [style=solid label="IF"]
  18 -> 14 [style=solid label="FOR"]
  18 -> 38 [style=dashed label="instructions"]
  18 -> 16 [style=dashed label="var_declarations"]
  18 -> 17 [style=dashed label="direct_assignment"]
  18 -> 18 [style=dashed label="unary_op"]
  18 -> 19 [style=dashed label="conditional_if"]
  18 -> 20 [style=dashed label="while_loop"]
  18 -> 21 [style=dashed label="for_loop"]
  18 -> "18R13" [style=solid]
 "18R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l 17 instructions: conditional_if . instructions\l"]
  19 -> 10 [style=solid label="ID"]
  19 -> 11 [style=solid label="TYPE"]
  19 -> 12 [style=solid label="WHILE"]
  19 -> 13 [style=solid label="IF"]
  19 -> 14 [style=solid label="FOR"]
  19 -> 39 [style=dashed label="instructions"]
  19 -> 16 [style=dashed label="var_declarations"]
  19 -> 17 [style=dashed label="direct_assignment"]
  19 -> 18 [style=dashed label="unary_op"]
  19 -> 19 [style=dashed label="conditional_if"]
  19 -> 20 [style=dashed label="while_loop"]
  19 -> 21 [style=dashed label="for_loop"]
  19 -> "19R13" [style=solid]
 "19R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l 18 instructions: while_loop . instructions\l"]
  20 -> 10 [style=solid label="ID"]
  20 -> 11 [style=solid label="TYPE"]
  20 -> 12 [style=solid label="WHILE"]
  20 -> 13 [style=solid label="IF"]
  20 -> 14 [style=solid label="FOR"]
  20 -> 40 [style=dashed label="instructions"]
  20 -> 16 [style=dashed label="var_declarations"]
  20 -> 17 [style=dashed label="direct_assignment"]
  20 -> 18 [style=dashed label="unary_op"]
  20 -> 19 [style=dashed label="conditional_if"]
  20 -> 20 [style=dashed label="while_loop"]
  20 -> 21 [style=dashed label="for_loop"]
  20 -> "20R13" [style=solid]
 "20R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l 19 instructions: for_loop . instructions\l"]
  21 -> 10 [style=solid label="ID"]
  21 -> 11 [style=solid label="TYPE"]
  21 -> 12 [style=solid label="WHILE"]
  21 -> 13 [style=solid label="IF"]
  21 -> 14 [style=solid label="FOR"]
  21 -> 41 [style=dashed label="instructions"]
  21 -> 16 [style=dashed label="var_declarations"]
  21 -> 17 [style=dashed label="direct_assignment"]
  21 -> 18 [style=dashed label="unary_op"]
  21 -> 19 [style=dashed label="conditional_if"]
  21 -> 20 [style=dashed label="while_loop"]
  21 -> 21 [style=dashed label="for_loop"]
  21 -> "21R13" [style=solid]
 "21R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l  3 subps: subp subps .\l"]
  22 -> "22R3" [style=solid]
 "22R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l  7 procedimento: FUNC ID '(' . args ')' instructions ENDFUNC\l"]
  23 -> 42 [style=solid label="TYPE"]
  23 -> 43 [style=dashed label="args"]
  23 -> 44 [style=dashed label="args_aux"]
  23 -> "23R8" [style=solid]
 "23R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l  6 funcao: FUNC TYPE ID . '(' args ')' instructions ENDFUNC\l"]
  24 -> 45 [style=solid label="'('"]
  25 [label="State 25\n\l 41 direct_assignment: ID ASSIGNMENT . expression\l"]
  25 -> 46 [style=solid label="ID"]
  25 -> 47 [style=dashed label="expression"]
  26 [label="State 26\n\l 44 unary_op: ID DECREMENT .\l"]
  26 -> "26R44" [style=solid]
 "26R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  27 [label="State 27\n\l 43 unary_op: ID INCREMENT .\l"]
  27 -> "27R43" [style=solid]
 "27R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l 45 unary_op: ID SUBTRACTION_ASSIGNMENT .\l"]
  28 -> "28R45" [style=solid]
 "28R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l 42 unary_op: ID ADITION_ASSIGNMENT .\l"]
  29 -> "29R42" [style=solid]
 "29R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 23 variable: ID .\l 24         | ID . LBRACKET ID RBRACKET\l 25         | ID . ASSIGNMENT expression\l 26         | ID . LBRACKET ID RBRACKET ASSIGNMENT expression\l"]
  30 -> 48 [style=solid label="ASSIGNMENT"]
  30 -> 49 [style=solid label="LBRACKET"]
  30 -> "30R23" [style=solid]
 "30R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 20 var_declarations: TYPE var_list .\l"]
  31 -> "31R20" [style=solid]
 "31R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  32 [label="State 32\n\l 21 var_list: variable . ',' var_list\l 22         | variable .\l"]
  32 -> 50 [style=solid label="','"]
  32 -> "32R22" [style=solid]
 "32R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l 48 while_loop: WHILE '(' . expression ')' instructions ENDWHILE\l"]
  33 -> 46 [style=solid label="ID"]
  33 -> 51 [style=dashed label="expression"]
  34 [label="State 34\n\l 46 conditional_if: IF '(' . expression ')' instructions ENDIF\l 47               | IF '(' . expression ')' instructions ELSE instructions ENDIF\l"]
  34 -> 46 [style=solid label="ID"]
  34 -> 52 [style=dashed label="expression"]
  35 [label="State 35\n\l 49 for_loop: FOR '(' . var_declarations ';' expression ';' unary_op ')' instructions ENDFOR\l"]
  35 -> 11 [style=solid label="TYPE"]
  35 -> 53 [style=dashed label="var_declarations"]
  36 [label="State 36\n\l 14 instructions: var_declarations instructions .\l"]
  36 -> "36R14" [style=solid]
 "36R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l 15 instructions: direct_assignment instructions .\l"]
  37 -> "37R15" [style=solid]
 "37R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l 16 instructions: unary_op instructions .\l"]
  38 -> "38R16" [style=solid]
 "38R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l 17 instructions: conditional_if instructions .\l"]
  39 -> "39R17" [style=solid]
 "39R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l 18 instructions: while_loop instructions .\l"]
  40 -> "40R18" [style=solid]
 "40R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 19 instructions: for_loop instructions .\l"]
  41 -> "41R19" [style=solid]
 "41R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l 10 args_aux: TYPE . ID\l 11         | TYPE . ID LBRACKET RBRACKET ',' args_aux\l 12         | TYPE . ID ',' args_aux\l"]
  42 -> 54 [style=solid label="ID"]
  43 [label="State 43\n\l  7 procedimento: FUNC ID '(' args . ')' instructions ENDFUNC\l"]
  43 -> 55 [style=solid label="')'"]
  44 [label="State 44\n\l  9 args: args_aux .\l"]
  44 -> "44R9" [style=solid]
 "44R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l  6 funcao: FUNC TYPE ID '(' . args ')' instructions ENDFUNC\l"]
  45 -> 42 [style=solid label="TYPE"]
  45 -> 56 [style=dashed label="args"]
  45 -> 44 [style=dashed label="args_aux"]
  45 -> "45R8" [style=solid]
 "45R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  46 [label="State 46\n\l 27 expression: ID .\l 28           | ID . ASSIGNMENT expression\l 29           | ID . OP_PLUS expression\l 30           | ID . OP_MINUS expression\l 31           | ID . OP_DIV expression\l 32           | ID . OP_MULT expression\l 33           | ID . LESS_THAN expression\l 34           | ID . GREATER_THAN expression\l 35           | ID . EQUALS expression\l 36           | ID . LESS_THAN_OR_EQUAL expression\l 37           | ID . GREATER_THAN_OR_EQUAL expression\l 38           | ID . NOT_EQUALS expression\l 39           | ID . LOGICAL_AND expression\l 40           | ID . LOGICAL_OR expression\l"]
  46 -> 57 [style=solid label="ASSIGNMENT"]
  46 -> 58 [style=solid label="EQUALS"]
  46 -> 59 [style=solid label="NOT_EQUALS"]
  46 -> 60 [style=solid label="GREATER_THAN"]
  46 -> 61 [style=solid label="LESS_THAN"]
  46 -> 62 [style=solid label="GREATER_THAN_OR_EQUAL"]
  46 -> 63 [style=solid label="LESS_THAN_OR_EQUAL"]
  46 -> 64 [style=solid label="OP_PLUS"]
  46 -> 65 [style=solid label="OP_MINUS"]
  46 -> 66 [style=solid label="OP_DIV"]
  46 -> 67 [style=solid label="OP_MULT"]
  46 -> 68 [style=solid label="LOGICAL_AND"]
  46 -> 69 [style=solid label="LOGICAL_OR"]
  46 -> "46R27" [style=solid]
 "46R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  47 [label="State 47\n\l 41 direct_assignment: ID ASSIGNMENT expression .\l"]
  47 -> "47R41" [style=solid]
 "47R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l 25 variable: ID ASSIGNMENT . expression\l"]
  48 -> 46 [style=solid label="ID"]
  48 -> 70 [style=dashed label="expression"]
  49 [label="State 49\n\l 24 variable: ID LBRACKET . ID RBRACKET\l 26         | ID LBRACKET . ID RBRACKET ASSIGNMENT expression\l"]
  49 -> 71 [style=solid label="ID"]
  50 [label="State 50\n\l 21 var_list: variable ',' . var_list\l"]
  50 -> 30 [style=solid label="ID"]
  50 -> 72 [style=dashed label="var_list"]
  50 -> 32 [style=dashed label="variable"]
  51 [label="State 51\n\l 48 while_loop: WHILE '(' expression . ')' instructions ENDWHILE\l"]
  51 -> 73 [style=solid label="')'"]
  52 [label="State 52\n\l 46 conditional_if: IF '(' expression . ')' instructions ENDIF\l 47               | IF '(' expression . ')' instructions ELSE instructions ENDIF\l"]
  52 -> 74 [style=solid label="')'"]
  53 [label="State 53\n\l 49 for_loop: FOR '(' var_declarations . ';' expression ';' unary_op ')' instructions ENDFOR\l"]
  53 -> 75 [style=solid label="';'"]
  54 [label="State 54\n\l 10 args_aux: TYPE ID .\l 11         | TYPE ID . LBRACKET RBRACKET ',' args_aux\l 12         | TYPE ID . ',' args_aux\l"]
  54 -> 76 [style=solid label="LBRACKET"]
  54 -> 77 [style=solid label="','"]
  54 -> "54R10" [style=solid]
 "54R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l  7 procedimento: FUNC ID '(' args ')' . instructions ENDFUNC\l"]
  55 -> 10 [style=solid label="ID"]
  55 -> 11 [style=solid label="TYPE"]
  55 -> 12 [style=solid label="WHILE"]
  55 -> 13 [style=solid label="IF"]
  55 -> 14 [style=solid label="FOR"]
  55 -> 78 [style=dashed label="instructions"]
  55 -> 16 [style=dashed label="var_declarations"]
  55 -> 17 [style=dashed label="direct_assignment"]
  55 -> 18 [style=dashed label="unary_op"]
  55 -> 19 [style=dashed label="conditional_if"]
  55 -> 20 [style=dashed label="while_loop"]
  55 -> 21 [style=dashed label="for_loop"]
  55 -> "55R13" [style=solid]
 "55R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  56 [label="State 56\n\l  6 funcao: FUNC TYPE ID '(' args . ')' instructions ENDFUNC\l"]
  56 -> 79 [style=solid label="')'"]
  57 [label="State 57\n\l 28 expression: ID ASSIGNMENT . expression\l"]
  57 -> 46 [style=solid label="ID"]
  57 -> 80 [style=dashed label="expression"]
  58 [label="State 58\n\l 35 expression: ID EQUALS . expression\l"]
  58 -> 46 [style=solid label="ID"]
  58 -> 81 [style=dashed label="expression"]
  59 [label="State 59\n\l 38 expression: ID NOT_EQUALS . expression\l"]
  59 -> 46 [style=solid label="ID"]
  59 -> 82 [style=dashed label="expression"]
  60 [label="State 60\n\l 34 expression: ID GREATER_THAN . expression\l"]
  60 -> 46 [style=solid label="ID"]
  60 -> 83 [style=dashed label="expression"]
  61 [label="State 61\n\l 33 expression: ID LESS_THAN . expression\l"]
  61 -> 46 [style=solid label="ID"]
  61 -> 84 [style=dashed label="expression"]
  62 [label="State 62\n\l 37 expression: ID GREATER_THAN_OR_EQUAL . expression\l"]
  62 -> 46 [style=solid label="ID"]
  62 -> 85 [style=dashed label="expression"]
  63 [label="State 63\n\l 36 expression: ID LESS_THAN_OR_EQUAL . expression\l"]
  63 -> 46 [style=solid label="ID"]
  63 -> 86 [style=dashed label="expression"]
  64 [label="State 64\n\l 29 expression: ID OP_PLUS . expression\l"]
  64 -> 46 [style=solid label="ID"]
  64 -> 87 [style=dashed label="expression"]
  65 [label="State 65\n\l 30 expression: ID OP_MINUS . expression\l"]
  65 -> 46 [style=solid label="ID"]
  65 -> 88 [style=dashed label="expression"]
  66 [label="State 66\n\l 31 expression: ID OP_DIV . expression\l"]
  66 -> 46 [style=solid label="ID"]
  66 -> 89 [style=dashed label="expression"]
  67 [label="State 67\n\l 32 expression: ID OP_MULT . expression\l"]
  67 -> 46 [style=solid label="ID"]
  67 -> 90 [style=dashed label="expression"]
  68 [label="State 68\n\l 39 expression: ID LOGICAL_AND . expression\l"]
  68 -> 46 [style=solid label="ID"]
  68 -> 91 [style=dashed label="expression"]
  69 [label="State 69\n\l 40 expression: ID LOGICAL_OR . expression\l"]
  69 -> 46 [style=solid label="ID"]
  69 -> 92 [style=dashed label="expression"]
  70 [label="State 70\n\l 25 variable: ID ASSIGNMENT expression .\l"]
  70 -> "70R25" [style=solid]
 "70R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  71 [label="State 71\n\l 24 variable: ID LBRACKET ID . RBRACKET\l 26         | ID LBRACKET ID . RBRACKET ASSIGNMENT expression\l"]
  71 -> 93 [style=solid label="RBRACKET"]
  72 [label="State 72\n\l 21 var_list: variable ',' var_list .\l"]
  72 -> "72R21" [style=solid]
 "72R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l 48 while_loop: WHILE '(' expression ')' . instructions ENDWHILE\l"]
  73 -> 10 [style=solid label="ID"]
  73 -> 11 [style=solid label="TYPE"]
  73 -> 12 [style=solid label="WHILE"]
  73 -> 13 [style=solid label="IF"]
  73 -> 14 [style=solid label="FOR"]
  73 -> 94 [style=dashed label="instructions"]
  73 -> 16 [style=dashed label="var_declarations"]
  73 -> 17 [style=dashed label="direct_assignment"]
  73 -> 18 [style=dashed label="unary_op"]
  73 -> 19 [style=dashed label="conditional_if"]
  73 -> 20 [style=dashed label="while_loop"]
  73 -> 21 [style=dashed label="for_loop"]
  73 -> "73R13" [style=solid]
 "73R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  74 [label="State 74\n\l 46 conditional_if: IF '(' expression ')' . instructions ENDIF\l 47               | IF '(' expression ')' . instructions ELSE instructions ENDIF\l"]
  74 -> 10 [style=solid label="ID"]
  74 -> 11 [style=solid label="TYPE"]
  74 -> 12 [style=solid label="WHILE"]
  74 -> 13 [style=solid label="IF"]
  74 -> 14 [style=solid label="FOR"]
  74 -> 95 [style=dashed label="instructions"]
  74 -> 16 [style=dashed label="var_declarations"]
  74 -> 17 [style=dashed label="direct_assignment"]
  74 -> 18 [style=dashed label="unary_op"]
  74 -> 19 [style=dashed label="conditional_if"]
  74 -> 20 [style=dashed label="while_loop"]
  74 -> 21 [style=dashed label="for_loop"]
  74 -> "74R13" [style=solid]
 "74R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  75 [label="State 75\n\l 49 for_loop: FOR '(' var_declarations ';' . expression ';' unary_op ')' instructions ENDFOR\l"]
  75 -> 46 [style=solid label="ID"]
  75 -> 96 [style=dashed label="expression"]
  76 [label="State 76\n\l 11 args_aux: TYPE ID LBRACKET . RBRACKET ',' args_aux\l"]
  76 -> 97 [style=solid label="RBRACKET"]
  77 [label="State 77\n\l 12 args_aux: TYPE ID ',' . args_aux\l"]
  77 -> 42 [style=solid label="TYPE"]
  77 -> 98 [style=dashed label="args_aux"]
  78 [label="State 78\n\l  7 procedimento: FUNC ID '(' args ')' instructions . ENDFUNC\l"]
  78 -> 99 [style=solid label="ENDFUNC"]
  79 [label="State 79\n\l  6 funcao: FUNC TYPE ID '(' args ')' . instructions ENDFUNC\l"]
  79 -> 10 [style=solid label="ID"]
  79 -> 11 [style=solid label="TYPE"]
  79 -> 12 [style=solid label="WHILE"]
  79 -> 13 [style=solid label="IF"]
  79 -> 14 [style=solid label="FOR"]
  79 -> 100 [style=dashed label="instructions"]
  79 -> 16 [style=dashed label="var_declarations"]
  79 -> 17 [style=dashed label="direct_assignment"]
  79 -> 18 [style=dashed label="unary_op"]
  79 -> 19 [style=dashed label="conditional_if"]
  79 -> 20 [style=dashed label="while_loop"]
  79 -> 21 [style=dashed label="for_loop"]
  79 -> "79R13" [style=solid]
 "79R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l 28 expression: ID ASSIGNMENT expression .\l"]
  80 -> "80R28" [style=solid]
 "80R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  81 [label="State 81\n\l 35 expression: ID EQUALS expression .\l"]
  81 -> "81R35" [style=solid]
 "81R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  82 [label="State 82\n\l 38 expression: ID NOT_EQUALS expression .\l"]
  82 -> "82R38" [style=solid]
 "82R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  83 [label="State 83\n\l 34 expression: ID GREATER_THAN expression .\l"]
  83 -> "83R34" [style=solid]
 "83R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  84 [label="State 84\n\l 33 expression: ID LESS_THAN expression .\l"]
  84 -> "84R33" [style=solid]
 "84R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l 37 expression: ID GREATER_THAN_OR_EQUAL expression .\l"]
  85 -> "85R37" [style=solid]
 "85R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  86 [label="State 86\n\l 36 expression: ID LESS_THAN_OR_EQUAL expression .\l"]
  86 -> "86R36" [style=solid]
 "86R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  87 [label="State 87\n\l 29 expression: ID OP_PLUS expression .\l"]
  87 -> "87R29" [style=solid]
 "87R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  88 [label="State 88\n\l 30 expression: ID OP_MINUS expression .\l"]
  88 -> "88R30" [style=solid]
 "88R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  89 [label="State 89\n\l 31 expression: ID OP_DIV expression .\l"]
  89 -> "89R31" [style=solid]
 "89R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  90 [label="State 90\n\l 32 expression: ID OP_MULT expression .\l"]
  90 -> "90R32" [style=solid]
 "90R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  91 [label="State 91\n\l 39 expression: ID LOGICAL_AND expression .\l"]
  91 -> "91R39" [style=solid]
 "91R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l 40 expression: ID LOGICAL_OR expression .\l"]
  92 -> "92R40" [style=solid]
 "92R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l 24 variable: ID LBRACKET ID RBRACKET .\l 26         | ID LBRACKET ID RBRACKET . ASSIGNMENT expression\l"]
  93 -> 101 [style=solid label="ASSIGNMENT"]
  93 -> "93R24" [style=solid]
 "93R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  94 [label="State 94\n\l 48 while_loop: WHILE '(' expression ')' instructions . ENDWHILE\l"]
  94 -> 102 [style=solid label="ENDWHILE"]
  95 [label="State 95\n\l 46 conditional_if: IF '(' expression ')' instructions . ENDIF\l 47               | IF '(' expression ')' instructions . ELSE instructions ENDIF\l"]
  95 -> 103 [style=solid label="ELSE"]
  95 -> 104 [style=solid label="ENDIF"]
  96 [label="State 96\n\l 49 for_loop: FOR '(' var_declarations ';' expression . ';' unary_op ')' instructions ENDFOR\l"]
  96 -> 105 [style=solid label="';'"]
  97 [label="State 97\n\l 11 args_aux: TYPE ID LBRACKET RBRACKET . ',' args_aux\l"]
  97 -> 106 [style=solid label="','"]
  98 [label="State 98\n\l 12 args_aux: TYPE ID ',' args_aux .\l"]
  98 -> "98R12" [style=solid]
 "98R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l  7 procedimento: FUNC ID '(' args ')' instructions ENDFUNC .\l"]
  99 -> "99R7" [style=solid]
 "99R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l  6 funcao: FUNC TYPE ID '(' args ')' instructions . ENDFUNC\l"]
  100 -> 107 [style=solid label="ENDFUNC"]
  101 [label="State 101\n\l 26 variable: ID LBRACKET ID RBRACKET ASSIGNMENT . expression\l"]
  101 -> 46 [style=solid label="ID"]
  101 -> 108 [style=dashed label="expression"]
  102 [label="State 102\n\l 48 while_loop: WHILE '(' expression ')' instructions ENDWHILE .\l"]
  102 -> "102R48" [style=solid]
 "102R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  103 [label="State 103\n\l 47 conditional_if: IF '(' expression ')' instructions ELSE . instructions ENDIF\l"]
  103 -> 10 [style=solid label="ID"]
  103 -> 11 [style=solid label="TYPE"]
  103 -> 12 [style=solid label="WHILE"]
  103 -> 13 [style=solid label="IF"]
  103 -> 14 [style=solid label="FOR"]
  103 -> 109 [style=dashed label="instructions"]
  103 -> 16 [style=dashed label="var_declarations"]
  103 -> 17 [style=dashed label="direct_assignment"]
  103 -> 18 [style=dashed label="unary_op"]
  103 -> 19 [style=dashed label="conditional_if"]
  103 -> 20 [style=dashed label="while_loop"]
  103 -> 21 [style=dashed label="for_loop"]
  103 -> "103R13" [style=solid]
 "103R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l 46 conditional_if: IF '(' expression ')' instructions ENDIF .\l"]
  104 -> "104R46" [style=solid]
 "104R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  105 [label="State 105\n\l 49 for_loop: FOR '(' var_declarations ';' expression ';' . unary_op ')' instructions ENDFOR\l"]
  105 -> 110 [style=solid label="ID"]
  105 -> 111 [style=dashed label="unary_op"]
  106 [label="State 106\n\l 11 args_aux: TYPE ID LBRACKET RBRACKET ',' . args_aux\l"]
  106 -> 42 [style=solid label="TYPE"]
  106 -> 112 [style=dashed label="args_aux"]
  107 [label="State 107\n\l  6 funcao: FUNC TYPE ID '(' args ')' instructions ENDFUNC .\l"]
  107 -> "107R6" [style=solid]
 "107R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l 26 variable: ID LBRACKET ID RBRACKET ASSIGNMENT expression .\l"]
  108 -> "108R26" [style=solid]
 "108R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l 47 conditional_if: IF '(' expression ')' instructions ELSE instructions . ENDIF\l"]
  109 -> 113 [style=solid label="ENDIF"]
  110 [label="State 110\n\l 42 unary_op: ID . ADITION_ASSIGNMENT\l 43         | ID . INCREMENT\l 44         | ID . DECREMENT\l 45         | ID . SUBTRACTION_ASSIGNMENT\l"]
  110 -> 26 [style=solid label="DECREMENT"]
  110 -> 27 [style=solid label="INCREMENT"]
  110 -> 28 [style=solid label="SUBTRACTION_ASSIGNMENT"]
  110 -> 29 [style=solid label="ADITION_ASSIGNMENT"]
  111 [label="State 111\n\l 49 for_loop: FOR '(' var_declarations ';' expression ';' unary_op . ')' instructions ENDFOR\l"]
  111 -> 114 [style=solid label="')'"]
  112 [label="State 112\n\l 11 args_aux: TYPE ID LBRACKET RBRACKET ',' args_aux .\l"]
  112 -> "112R11" [style=solid]
 "112R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l 47 conditional_if: IF '(' expression ')' instructions ELSE instructions ENDIF .\l"]
  113 -> "113R47" [style=solid]
 "113R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l 49 for_loop: FOR '(' var_declarations ';' expression ';' unary_op ')' . instructions ENDFOR\l"]
  114 -> 10 [style=solid label="ID"]
  114 -> 11 [style=solid label="TYPE"]
  114 -> 12 [style=solid label="WHILE"]
  114 -> 13 [style=solid label="IF"]
  114 -> 14 [style=solid label="FOR"]
  114 -> 115 [style=dashed label="instructions"]
  114 -> 16 [style=dashed label="var_declarations"]
  114 -> 17 [style=dashed label="direct_assignment"]
  114 -> 18 [style=dashed label="unary_op"]
  114 -> 19 [style=dashed label="conditional_if"]
  114 -> 20 [style=dashed label="while_loop"]
  114 -> 21 [style=dashed label="for_loop"]
  114 -> "114R13" [style=solid]
 "114R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l 49 for_loop: FOR '(' var_declarations ';' expression ';' unary_op ')' instructions . ENDFOR\l"]
  115 -> 116 [style=solid label="ENDFOR"]
  116 [label="State 116\n\l 49 for_loop: FOR '(' var_declarations ';' expression ';' unary_op ')' instructions ENDFOR .\l"]
  116 -> "116R49" [style=solid]
 "116R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
}
